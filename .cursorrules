# Cursor Rules - Vue 3 + Supabase Development Standards
# Reglas de c√≥digo para desarrollo con Vue 3, TypeScript, Tailwind CSS y Supabase

## üéØ ESTRUCTURA DE DIRECTORIOS Y ARCHIVOS

### Organizaci√≥n de directorios:
- Usar estructura clara y l√≥gica: `/src/components`, `/src/views`, `/src/lib`, `/src/composables`
- Nombres de archivos en ingl√©s y kebab-case: `user-profile.vue`, `product-catalog.vue`
- Separar claramente componentes, vistas, composables y utilidades
- Mantener archivos de configuraci√≥n en directorio ra√≠z
- Organizar assets por tipo: `/src/assets/css`, `/src/assets/js`, `/src/assets/images`

### Nomenclatura de archivos:
- Vue Components: `UserProfile.vue`, `ProductCard.vue`, `NavigationMenu.vue`
- TypeScript: `userService.ts`, `productManager.ts`, `databaseClient.ts`
- CSS: `main.css`, `components.css`, `utilities.css`
- Composables: `useAuth.ts`, `useProducts.ts`, `useSupabase.ts`

## üéØ VUE 3 COMPOSITION API ESTRICTO

### Regla CR√çTICA - Options API exclusivamente:
- ‚úÖ **SIEMPRE** usar Options API pattern en todos los componentes Vue
- ‚ùå **NUNCA** usar Composition API con `<script setup>`
- ‚ùå **NUNCA** usar `ref()`, `reactive()`, `computed()` directamente

## üéØ REGLAS PARA EL USO CORRECTO DE defineComponent EN VUE 3

### 1. üì¶ Importaci√≥n obligatoria
```typescript
import { defineComponent } from 'vue'
```
- Siempre debe estar presente si se usa la API de composici√≥n sin `<script setup>`
- **OBLIGATORIO** en todos los componentes Vue con TypeScript

### 2. üß† Declaraci√≥n clara de props
```typescript
import type { PropType } from 'vue'

export default defineComponent({
  props: {
    // String simple
    title: {
      type: String,
      required: true
    },
    // Object complejo con PropType
    config: {
      type: Object as PropType<ConfigType>,
      required: true
    },
    // Array tipado
    items: {
      type: Array as PropType<User[]>,
      default: () => []
    }
  }
})
```
- **NUNCA** usar `any` como tipo
- **SIEMPRE** tipar correctamente con PropType para objetos complejos

### 3. üó£Ô∏è Tipado de emits
```typescript
export default defineComponent({
  // Declaraci√≥n simple
  emits: ['submit', 'cancel'],
  
  // O con TypeScript tipado
  emits: {
    submit: (data: FormData) => true,
    cancel: () => true,
    update: (value: string) => typeof value === 'string'
  }
})
```
- **OBLIGATORIO** declarar todos los eventos emitidos
- Con TypeScript, tipar los par√°metros del evento

### 4. üß© Uso correcto de setup() (si se usa)
```typescript
export default defineComponent({
  setup(props, { emit, slots, attrs }) {
    const handleClick = () => {
      emit('submit', props.data)
    }
    
    // Retornar solo lo necesario para el template
    return { 
      handleClick 
    }
  }
})
```
- Primer par√°metro: `props`
- Segundo par√°metro: `{ emit, slots, attrs }` si se usan
- Retornar solo lo necesario para el template

### 5. üìê Organizaci√≥n del componente
```typescript
export default defineComponent({
  name: 'MyComponent',           // ‚úÖ Nombre descriptivo
  props: { /* ... */ },          // ‚úÖ Props primero
  emits: [/* ... */],            // ‚úÖ Emits segundo
  data() { /* ... */ },          // ‚úÖ Data tercero
  computed: { /* ... */ },       // ‚úÖ Computed cuarto
  methods: { /* ... */ },        // ‚úÖ Methods quinto
  watch: { /* ... */ },          // ‚úÖ Watch sexto
  mounted() { /* ... */ }        // ‚úÖ Lifecycle hooks √∫ltimo
})
```

### 6. üß™ Validaci√≥n con ESLint y TypeScript
**Reglas ESLint recomendadas:**
- `vue/require-prop-types` - Requerir tipos en props
- `vue/require-explicit-emits` - Requerir declaraci√≥n expl√≠cita de emits
- `vue/component-definition-name-casing` - Nomenclatura consistente
- `@typescript-eslint/explicit-function-return-type` - Tipos de retorno expl√≠citos

### 7. üìö Documentaci√≥n interna
```typescript
export default defineComponent({
  name: 'UserProfile',
  
  /**
   * Props del componente
   * @description Configuraci√≥n del perfil de usuario
   */
  props: {
    user: {
      type: Object as PropType<User>,
      required: true,
      validator: (value: User) => {
        return value && typeof value.id === 'number'
      }
    }
  },
  
  /**
   * Eventos emitidos por el componente
   */
  emits: {
    update: (user: User) => true,
    delete: (userId: number) => true
  },
  
  methods: {
    /**
     * Actualiza la informaci√≥n del usuario
     * @param newData - Nuevos datos del usuario
     */
    updateUser(newData: Partial<User>) {
      // L√≥gica de actualizaci√≥n
      this.$emit('update', { ...this.user, ...newData })
    }
  }
})
```

### 8. ‚úÖ VERIFICACIONES OBLIGATORIAS PARA defineComponent
- ‚úÖ Import de `defineComponent` presente
- ‚úÖ Props tipados correctamente (sin `any`)
- ‚úÖ Emits declarados y tipados
- ‚úÖ Estructura del componente organizada
- ‚úÖ Documentaci√≥n en componentes complejos
- ‚úÖ Validadores en props cuando sea necesario
- ‚úÖ TypeScript sin errores

### Estructura de componente obligatoria:
```vue
<template>
  <div class="component-container">
    <h1>{{ title }}</h1>
    <button @click="handleClick">{{ buttonText }}</button>
  </div>
</template>

<script>
export default {
  name: 'ComponentName',
  props: {
    title: {
      type: String,
      required: true,
      default: 'Default Title'
    }
  },
  data() {
    return {
      buttonText: 'Click me',
      isLoading: false
    }
  },
  computed: {
    displayText() {
      return this.isLoading ? 'Loading...' : this.buttonText
    }
  },
  methods: {
    async handleClick() {
      this.isLoading = true
      try {
        // L√≥gica del m√©todo
      } finally {
        this.isLoading = false
      }
    }
  },
  async mounted() {
    // L√≥gica de inicializaci√≥n
  }
}
</script>

<style scoped>
.component-container {
  /* Estilos del componente */
}
</style>
```

### Props y validaci√≥n:
```javascript
props: {
  // String requerido
  title: {
    type: String,
    required: true
  },
  // Number con valor por defecto
  count: {
    type: Number,
    default: 0
  },
  // Array con validaci√≥n personalizada
  items: {
    type: Array,
    default: () => [],
    validator: (value) => Array.isArray(value)
  },
  // Object con estructura espec√≠fica
  user: {
    type: Object,
    required: true,
    validator: (value) => {
      return value && typeof value.id === 'number' && typeof value.name === 'string'
    }
  }
}
```

## üé® TAILWIND CSS Y DISE√ëO

### Convenciones de clases:
- Usar clases de Tailwind CSS para todos los estilos
- Nombres descriptivos para clases personalizadas: `.product-card`, `.user-profile`
- Estados: `.is-active`, `.is-loading`, `.is-disabled`
- Responsive: `.mobile-only`, `.tablet-up`, `.desktop-only`

### Ejemplos de componentes con Tailwind:
```vue
<template>
  <div class="max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden">
    <div class="p-6">
      <h3 class="text-xl font-semibold text-gray-800 mb-2">{{ product.name }}</h3>
      <p class="text-gray-600 mb-4">{{ product.description }}</p>
      <button 
        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors"
        :class="{ 'opacity-50 cursor-not-allowed': isLoading }"
        @click="handlePurchase"
        :disabled="isLoading"
      >
        {{ isLoading ? 'Processing...' : 'Buy Now' }}
      </button>
    </div>
  </div>
</template>
```

### Responsive Design:
```vue
<template>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div 
      v-for="item in items" 
      :key="item.id"
      class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
    >
      <!-- Contenido del item -->
    </div>
  </div>
</template>
```

## üóÑÔ∏è SUPABASE INTEGRATION

### Cliente de Supabase:
```javascript
// src/lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabasePublishableKey = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY

export const supabase = createClient(supabaseUrl, supabasePublishableKey)
```

### Uso en componentes Vue:
```javascript
// En el componente Vue
import { supabase } from '@/lib/supabaseClient'

export default {
  name: 'ProductList',
  data() {
    return {
      products: [],
      isLoading: false,
      error: null
    }
  },
  methods: {
    async fetchProducts() {
      this.isLoading = true
      this.error = null
      
      try {
        const { data, error } = await supabase
          .from('products')
          .select('*')
          .eq('active', true)
          .order('created_at', { ascending: false })
        
        if (error) throw error
        
        this.products = data || []
      } catch (err) {
        this.error = err.message
        console.error('Error fetching products:', err)
      } finally {
        this.isLoading = false
      }
    },
    
    async createProduct(productData) {
      try {
        const { data, error } = await supabase
          .from('products')
          .insert([productData])
          .select()
        
        if (error) throw error
        
        this.products.unshift(data[0])
        return data[0]
      } catch (err) {
        this.error = err.message
        throw err
      }
    }
  },
  async mounted() {
    await this.fetchProducts()
  }
}
```

### Manejo de autenticaci√≥n:
```javascript
// src/composables/useAuth.js (si se usa composables)
export function useAuth() {
  const user = ref(null)
  const loading = ref(true)
  
  const signIn = async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    if (error) throw error
    return data
  }
  
  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  }
  
  return {
    user: readonly(user),
    loading: readonly(loading),
    signIn,
    signOut
  }
}
```

## üìù FORMULARIOS Y VALIDACI√ìN

### Estructura de formularios Vue:
```vue
<template>
  <form @submit.prevent="handleSubmit" class="space-y-6">
    <div class="form-group">
      <label for="name" class="block text-sm font-medium text-gray-700">
        Nombre completo
      </label>
      <input
        id="name"
        v-model="form.name"
        type="text"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        :class="{ 'border-red-500': errors.name }"
      />
      <p v-if="errors.name" class="mt-1 text-sm text-red-600">{{ errors.name }}</p>
    </div>
    
    <div class="form-group">
      <label for="email" class="block text-sm font-medium text-gray-700">
        Correo electr√≥nico
      </label>
      <input
        id="email"
        v-model="form.email"
        type="email"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        :class="{ 'border-red-500': errors.email }"
      />
      <p v-if="errors.email" class="mt-1 text-sm text-red-600">{{ errors.email }}</p>
    </div>
    
    <button
      type="submit"
      class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      :disabled="isSubmitting"
    >
      {{ isSubmitting ? 'Enviando...' : 'Enviar' }}
    </button>
  </form>
</template>

<script>
export default {
  name: 'ContactForm',
  data() {
    return {
      form: {
        name: '',
        email: '',
        message: ''
      },
      errors: {},
      isSubmitting: false
    }
  },
  methods: {
    validateForm() {
      this.errors = {}
      
      if (!this.form.name.trim()) {
        this.errors.name = 'El nombre es requerido'
      }
      
      if (!this.form.email.trim()) {
        this.errors.email = 'El email es requerido'
      } else if (!this.isValidEmail(this.form.email)) {
        this.errors.email = 'Ingrese un email v√°lido'
      }
      
      return Object.keys(this.errors).length === 0
    },
    
    isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      return emailRegex.test(email)
    },
    
    async handleSubmit() {
      if (!this.validateForm()) return
      
      this.isSubmitting = true
      
      try {
        const { data, error } = await supabase
          .from('contacts')
          .insert([this.form])
          .select()
        
        if (error) throw error
        
        // Reset form
        this.form = { name: '', email: '', message: '' }
        this.$emit('success', data[0])
        
      } catch (err) {
        this.errors.submit = err.message
      } finally {
        this.isSubmitting = false
      }
    }
  }
}
</script>
```

## üé¨ ANIMACIONES Y TRANSICIONES

### Regla CR√çTICA - NO COMBINAR CSS + GSAP:
- ‚ùå **NUNCA** combinar `transition-*` en CSS con `gsap.to()` en JavaScript
- ‚ùå **NUNCA** combinar `animation` en CSS con `gsap.timeline()` en JavaScript
- ‚ùå **NUNCA** usar `transform` en CSS y `transform` en GSAP simult√°neamente

### CSS Transitions (Para animaciones simples):
```vue
<template>
  <div class="animated-card" :class="{ 'is-active': isActive }">
    <h3>{{ title }}</h3>
    <button @click="toggleActive">Toggle</button>
  </div>
</template>

<script>
export default {
  name: 'AnimatedCard',
  data() {
    return {
      isActive: false
    }
  },
  methods: {
    toggleActive() {
      this.isActive = !this.isActive
    }
  }
}
</script>

<style scoped>
.animated-card {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.animated-card.is-active {
  transform: scale(1.05);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}
</style>
```

### GSAP Animations (Para animaciones complejas):
```vue
<template>
  <div ref="cardElement" class="gsap-card">
    <h3>{{ title }}</h3>
    <button @click="animateCard">Animate</button>
  </div>
</template>

<script>
import { gsap } from 'gsap'

export default {
  name: 'GsapCard',
  data() {
    return {
      isAnimating: false
    }
  },
  methods: {
    animateCard() {
      if (this.isAnimating) return
      
      this.isAnimating = true
      
      gsap.to(this.$refs.cardElement, {
        scale: 1.2,
        rotation: 5,
        duration: 0.5,
        ease: 'power2.out',
        onComplete: () => {
          gsap.to(this.$refs.cardElement, {
            scale: 1,
            rotation: 0,
            duration: 0.3,
            ease: 'power2.out',
            onComplete: () => {
              this.isAnimating = false
            }
          })
        }
      })
    }
  },
  mounted() {
    // Animaci√≥n inicial
    gsap.from(this.$refs.cardElement, {
      opacity: 0,
      y: 50,
      duration: 1,
      ease: 'power2.out'
    })
  }
}
</script>

<style scoped>
.gsap-card {
  /* NO usar transition, transform, animation aqu√≠ */
  background: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
</style>
```

## üîç TYPESCRIPT INTEGRATION

### Configuraci√≥n de tipos:
```typescript
// src/types/index.ts
export interface User {
  id: number
  email: string
  name: string
  created_at: string
  updated_at: string
}

export interface Product {
  id: number
  name: string
  description: string
  price: number
  category_id: number
  active: boolean
  created_at: string
  updated_at: string
}

export interface ApiResponse<T> {
  data: T | null
  error: string | null
  loading: boolean
}
```

### Uso en componentes:
```vue
<script lang="ts">
import { defineComponent } from 'vue'
import type { User, Product } from '@/types'

export default defineComponent({
  name: 'UserProfile',
  props: {
    user: {
      type: Object as () => User,
      required: true
    }
  },
  data() {
    return {
      products: [] as Product[],
      loading: false
    }
  },
  methods: {
    async fetchUserProducts(userId: number): Promise<Product[]> {
      this.loading = true
      try {
        const { data, error } = await supabase
          .from('products')
          .select('*')
          .eq('user_id', userId)
        
        if (error) throw error
        return data || []
      } finally {
        this.loading = false
      }
    }
  }
})
</script>
```

## üì± RESPONSIVE DESIGN

### Mobile-first approach:
```vue
<template>
  <div class="container mx-auto px-4">
    <!-- Mobile: 1 columna, Desktop: 3 columnas -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div 
        v-for="item in items" 
        :key="item.id"
        class="bg-white rounded-lg shadow-md p-4 md:p-6"
      >
        <h3 class="text-lg md:text-xl font-semibold mb-2">{{ item.title }}</h3>
        <p class="text-sm md:text-base text-gray-600">{{ item.description }}</p>
      </div>
    </div>
  </div>
</template>
```

## üîç ACCESIBILIDAD

### Requisitos de accesibilidad:
- Contraste de colores m√≠nimo 4.5:1
- Navegaci√≥n por teclado
- Textos alternativos en im√°genes
- Estructura de encabezados correcta
- Etiquetas en formularios
- ARIA labels cuando sea necesario

### Ejemplo accesible:
```vue
<template>
  <section aria-labelledby="products-heading">
    <h2 id="products-heading" class="sr-only">Lista de productos</h2>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6" role="list">
      <article 
        v-for="product in products" 
        :key="product.id"
        class="bg-white rounded-lg shadow-md p-6"
        role="listitem"
        :aria-labelledby="`product-${product.id}-title`"
      >
        <h3 
          :id="`product-${product.id}-title`"
          class="text-xl font-semibold text-gray-800 mb-2"
        >
          {{ product.name }}
        </h3>
        
        <img 
          :src="product.image" 
          :alt="`Imagen de ${product.name}`"
          class="w-full h-48 object-cover rounded-md mb-4"
          loading="lazy"
        />
        
        <p class="text-gray-600 mb-4">{{ product.description }}</p>
        
        <button 
          class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors"
          :aria-describedby="`product-${product.id}-price`"
          @click="addToCart(product)"
        >
          Agregar al carrito
        </button>
        
        <p 
          :id="`product-${product.id}-price`"
          class="text-lg font-bold text-green-600 mt-2"
        >
          ${{ product.price }}
        </p>
      </article>
    </div>
  </section>
</template>
```

## ‚úÖ VERIFICACIONES OBLIGATORIAS

### Antes de entregar c√≥digo:
1. ‚úÖ Vue 3 Options API usado correctamente
2. ‚úÖ TypeScript sin errores
3. ‚úÖ Tailwind CSS aplicado consistentemente
4. ‚úÖ Supabase integrado correctamente
5. ‚úÖ Formularios validados y funcionando
6. ‚úÖ Navegaci√≥n completamente funcional
7. ‚úÖ Responsive design en todos los dispositivos
8. ‚úÖ Accesibilidad b√°sica implementada
9. ‚úÖ Animaciones funcionando correctamente
10. ‚úÖ Variables de entorno configuradas

## üöÄ COMANDOS DE VERIFICACI√ìN

```bash
# Verificar TypeScript
npm run type-check

# Verificar linting
npm run lint

# Formatear c√≥digo
npm run format

# Verificar build
npm run build

# Ejecutar en desarrollo
npm run dev
```

## üéØ VARIABLES DE ENTORNO

### Configuraci√≥n requerida:
```env
# Supabase
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_PUBLISHABLE_KEY=your_supabase_anon_key

# App Configuration
VITE_APP_NAME=Music Taste
VITE_APP_VERSION=1.0.0
```

Estas reglas deben aplicarse en TODOS los archivos del proyecto para mantener consistencia y calidad del c√≥digo en Vue 3 + Supabase.
